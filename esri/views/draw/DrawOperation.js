// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.26/esri/copyright.txt for details.
//>>built
define("exports ../../chunks/_rollupPluginBabelHelpers ../../chunks/tslib.es6 ../../core/Evented ../../core/HandleOwner ../../core/lang ../../core/maybe ../../core/promiseUtils ../../core/reactiveUtils ../../core/screenUtils ../../core/accessorSupport/decorators/property ../../core/accessorSupport/ensureType ../../core/accessorSupport/decorators/subclass ../../layers/graphics/dehydratedFeatureComparison ../../support/elevationInfoUtils ../ViewingMode ./DrawingMode ./DrawManipulator ../interactive/coordinateHelper ../interactive/dragEventPipeline ../interactive/editGeometry/EditGeometry ../interactive/editGeometry/EditGeometryOperations ../interactive/sketch/SketchLabelOptions ../interactive/sketch/SketchTooltipOptions ../interactive/snapping/SnappingContext ../interactive/snapping/SnappingDragPipelineStep ../interactive/snapping/SnappingOperation ../interactive/snapping/snappingUtils".split(" "),
function(g,w,k,F,G,H,c,x,v,I,l,S,J,y,K,L,z,M,N,r,A,O,B,C,D,P,Q,R){g.DrawOperation=function(E){function t(a){var b=E.call(this,a)||this;b._createOperationCompleted=!1;b._pointerDownStates=new Set;b.isDraped=!0;b.labelOptions=new B;b.tooltipOptions=new C;b.snapToSceneEnabled=null;b.lastVertex=null;c.isNone(a.elevationInfo)&&(b.elevationInfo=K.getEffectiveElevationInfo(!!a.hasZ));return b}w._inheritsLoose(t,E);var h=t.prototype;h.initialize=function(){const {geometryType:a,view:b}=this,e=b.spatialReference,
f="viewingMode"in b.state?b.state.viewingMode:L.ViewingMode.Local,q="segment"===a||"multipoint"===a?"polyline":a;this.coordinateHelper=N.createCoordinateHelper(this.hasZ,this.hasM,e);this._editGeometryOperations=new O.EditGeometryOperations(new A.EditGeometry(q,this.coordinateHelper));this._snappingOperation=new Q.SnappingOperation({view:b,constrainResult:d=>c.isNone(d)?d:this._getEffectiveDrawSurface()?.constrainZ(d)});this.handles.add(v.watch(()=>this.stagedVertex,d=>{c.isNone(d)||this.emit("cursor-update",
{updated:null,vertices:[{componentIndex:0,vertexIndex:this._activeComponent.vertices.length,coordinates:this.coordinateHelper.pointToArray(d)}],operation:"apply",type:"vertex-update"})},{sync:!0,equals:(d,p)=>c.equalsMaybe(d,p,y.pointEquals)}));this._activeComponent=new A.Component(e,f);this._editGeometryOperations.data.components.push(this._activeComponent);const n=this.segmentLabels;c.isSome(n)&&(n.context={view:b,editGeometryOperations:this._editGeometryOperations,elevationInfo:this.elevationInfo,
labelOptions:this.labelOptions},this.handles.add([v.watch(()=>this.labelOptions.enabled,d=>{n.visible=d},v.syncAndInitial),this.on("cursor-update",()=>{const d=this.stagedVertex;n.stagedVertex=c.isSome(d)?this.coordinateHelper.pointToVector(d):null})]));this.handles.add(this._editGeometryOperations.on(["vertex-add","vertex-update","vertex-remove"],d=>{const p=d.vertices.map(u=>({componentIndex:0,vertexIndex:u.index,coordinates:this.coordinateHelper.vectorToArray(u.pos)})),m=p.map(u=>u.coordinates);
switch(d.type){case "vertex-add":this.emit(d.type,{...d,added:m,vertices:p});break;case "vertex-update":this.emit(d.type,{...d,updated:m,vertices:p});break;case "vertex-remove":this.emit(d.type,{...d,removed:m,vertices:p})}d=this._activeComponent.getLastVertex();d=c.isSome(d)?this.coordinateHelper.vectorToDehydratedPoint(d.pos):null;if(c.isNone(d)||c.isNone(this.lastVertex)||!y.pointEquals(this.lastVertex,d))this.lastVertex=d}));this._manipulator=new M.DrawManipulator({grabbableForEvent:d=>"click"!==
this.drawingMode?!0:"touch"===d.pointerType&&this._snappingEnabled&&1===this._pointerDownStates.size});this.manipulators.add(this._manipulator);this._manipulator.grabbable="point"!==a;this.handles.add([this._createManipulatorDragPipeline(this._manipulator),this._manipulator.events.on("immediate-click",d=>this._onImmediateClick(d)),this._manipulator.events.on("immediate-double-click",d=>this._onImmediateDoubleClick(d))]);R.setupSnappingToggleHandles(this,()=>{var d=c.unwrapOr(this.view.inputManager.latestPointerType,
"mouse");d=this._getSnappingContext(d);c.isSome(this.snappingManager)&&this.updatingHandles.addPromise(x.ignoreAbortErrors(this._snappingOperation.resnap(this.snappingManager,d)))})};h.destroy=function(){c.destroyMaybe(this.segmentLabels);c.destroyMaybe(this._snappingOperation);this._editGeometryOperations=c.destroyMaybe(this._editGeometryOperations)};h.cancel=function(){this.complete({aborted:!0})};h.commitStagedVertex=function(){this._snappingOperation.abort();if(c.isSome(this.stagedVertex)){const {stagedVertex:a}=
this;this.stagedVertex=null;this._editGeometryOperations.appendVertex(this.coordinateHelper.pointToVector(a))}};h.complete=function(a){a=a&&a.aborted||!1;this._snappingOperation.abort();c.isSome(this.snappingManager)&&this.snappingManager.doneSnapping();"segment"===this.geometryType||"point"===this.geometryType?this.commitStagedVertex():this.stagedVertex=null;this._createOperationCompleted=!("multipoint"===this.geometryType&&0===this.numVertices||"polyline"===this.geometryType&&2>this.numVertices||
"polygon"===this.geometryType&&3>this.numVertices);(this.isCompleted||a)&&this.emit("complete",{vertices:this.vertices.map((b,e)=>({componentIndex:0,vertexIndex:e,coordinates:b})),aborted:a,type:"complete"})};h.onInputEvent=function(a){switch(a.type){case "pointer-down":this._pointerDownStates.add(a.pointerId);break;case "pointer-up":this._pointerDownStates.delete(a.pointerId)}switch(a.type){case "pointer-move":return this._onPointerMove(a);case "hold":return this._onHold(a)}};h.redo=function(){this._editGeometryOperations.redo()};
h.undo=function(){c.isSome(this.snappingManager)&&this.snappingManager.doneSnapping();this._editGeometryOperations.undo()};h._closeOnClickVertexIndex=function(a){const b=this._activeComponent;if("polygon"===this.geometryType&&2<b.vertices.length){if(this._vertexWithinPointerDistance(b.vertices[0].pos,a))return 0;if(this._vertexWithinPointerDistance(b.vertices[b.vertices.length-1].pos,a))return b.vertices.length-1}return null};h._createManipulatorDragPipeline=function(a){switch(c.unwrap(this.drawingMode)){case "click":return this._createManipulatorDragPipelineClick(a);
case "freehand":return this._createManipulatorDragPipelineFreehand(a);case "hybrid":return this._createManipulatorDragPipelineHybrid(a)}};h._createManipulatorDragPipelineClick=function(a){return r.createManipulatorDragEventPipeline(a,(b,e,f,q)=>{const n="touch"===q&&this._snappingEnabled;if(!this.isCompleted&&n){var {snappingStep:d,cancelSnapping:p}=P.createSnapDragEventPipelineStep({predicate:()=>n,snappingManager:this.snappingManager,snappingContext:new D.SnappingContext({editGeometryOperations:this._editGeometryOperations,
elevationInfo:this.elevationInfo,pointer:q,visualizer:this.snappingVisualizer}),updatingHandles:this.updatingHandles,useZ:!this._requiresScenePoint});f=f.next(m=>{n&&c.isSome(this.snappingManager)&&this.snappingManager.doneSnapping();return m}).next(p);e.next(this._screenToMapDragEventStep()).next(m=>{"start"===m.action&&(this.stagedVertex=m.mapStart,("segment"===this.geometryType||n&&0===this.numVertices)&&this.commitStagedVertex());return m}).next(r.sceneSnappingAtLocation(this.view,this.elevationInfo)).next(...d).next(m=>
{n&&(this.stagedVertex=m.mapEnd,"end"===m.action&&this.commitStagedVertex());return m}).next(m=>{"end"!==m.action||"segment"!==this.geometryType&&"point"!==this.geometryType||this.complete();return m})}})};h._createManipulatorDragPipelineFreehand=function(a){return r.createManipulatorDragEventPipeline(a,(b,e)=>{this.isCompleted||e.next(this._screenToMapDragEventStep()).next(f=>{"start"===f.action&&(c.isNone(this.stagedVertex)&&(this.stagedVertex=f.mapStart),"segment"===this.geometryType&&this.commitStagedVertex());
return f}).next(f=>{switch(f.action){case "start":case "update":this.stagedVertex=f.mapEnd;"polygon"!==this.geometryType&&"polyline"!==this.geometryType||this.commitStagedVertex();break;case "end":this.complete()}return f})})};h._createManipulatorDragPipelineHybrid=function(a){return r.createManipulatorDragEventPipeline(a,(b,e)=>{this.isCompleted||e.next(this._screenToMapDragEventStep()).next(f=>{"start"===f.action&&(c.isNone(this.stagedVertex)&&(this.stagedVertex=f.mapStart),this.commitStagedVertex());
return f}).next(f=>{switch(f.action){case "start":case "update":this.stagedVertex=f.mapEnd;"polygon"!==this.geometryType&&"polyline"!==this.geometryType||this.commitStagedVertex();break;case "end":"segment"!==this.geometryType&&"point"!==this.geometryType||this.complete()}return f})})};h._getEffectiveDrawSurface=function(){if(c.isNone(this.elevationDrawSurface))return this.drawSurface;if(!this.coordinateHelper.hasZ())return this.elevationDrawSurface.defaultZ=null,this.elevationDrawSurface;let a=this.defaultZ,
b=!1;c.isSome(this.elevationInfo)&&"absolute-height"===this.elevationInfo.mode&&(b=!0);c.isSome(this.snapToSceneEnabled)&&(b=this.snapToSceneEnabled);c.isSome(this.elevationInfo)&&"on-the-ground"===this.elevationInfo.mode&&(b=!1);this._drawAtFixedElevation&&(a=this.coordinateHelper.getZ(this._activeComponent.vertices[0].pos),b=!1);if(b)return this.drawSurface;this.elevationDrawSurface.defaultZ=a;return this.elevationDrawSurface};h._mapToScreen=function(a){return this._getEffectiveDrawSurface()?.mapToScreen(a)};
h._onHold=function(a){this._snappingOperation.abort();"click"===this.drawingMode&&"touch"===a.pointerType&&this._snappingEnabled&&(this.stagedVertex=a.mapPoint);a.stopPropagation()};h._onImmediateClick=function(a){if(!("mouse"===a.pointerType&&2===a.button||this._manipulator.dragging)){var b=this._activeComponent,e=this._closeOnClickVertexIndex(a.screenPoint);if(c.isSome(e))a.stopPropagation(),this.complete();else{e=this._screenToMap(a.screenPoint);if(c.isSome(e))switch(this.drawingMode){case "freehand":"point"===
this.geometryType&&(c.isSome(this.stagedVertex)?this.commitStagedVertex():this._editGeometryOperations.appendVertex(this.coordinateHelper.pointToVector(e)),this.complete());break;case "click":case "hybrid":this._snappingOperation.abort(),c.isSome(this.stagedVertex)?this.commitStagedVertex():this._editGeometryOperations.appendVertex(this.coordinateHelper.pointToVector(e)),("point"===this.geometryType||"segment"===this.geometryType&&2===b.vertices.length||"segment"===this.geometryType&&"hybrid"===this.drawingMode&&
1===b.vertices.length)&&this.complete()}a.stopPropagation()}}};h._onImmediateDoubleClick=function(a){this._manipulator.dragging||"point"===this.geometryType||(this.complete(),a.stopPropagation())};h._onPointerMove=function(a){var b=I.createScreenPoint(a.x,a.y);const e=this._snappingOperation;if(this._manipulator.dragging||this._pointerDownStates.has(a.pointerId)||this._manipulator.grabbing||!this._manipulator.interactive)e.abort();else{a.stopPropagation();var f=this._closeOnClickVertexIndex(b);if(c.isSome(f))this._closeOnVertex(f),
e.abort();else if(f=this._screenToMap(b),b=this._requiresScenePoint?this.drawSurface?.screenToMap(b):null,this._manipulator.cursor=c.isSome(f)?"crosshair":null,c.isNone(f))e.abort();else{var q=this.snappingManager;c.isNone(q)?(this.stagedVertex=f,e.abort()):(a=this._getSnappingContext(a.pointerType),this.updatingHandles.addPromise(x.ignoreAbortErrors(e.snap({point:f,scenePoint:b},q,a))))}}};h._closeOnVertex=function(a){this.stagedVertex=null;a={componentIndex:0,vertexIndex:a,coordinates:this.coordinateHelper.vectorToArray(this._activeComponent.vertices[a].pos)};
this.emit("cursor-update",{updated:null,vertices:[a],operation:"apply",type:"vertex-update"})};h._screenToMap=function(a){return this._getEffectiveDrawSurface()?.screenToMap(a)};h._screenToMapDragEventStep=function(){let a=null;return b=>{"start"===b.action&&(a=this._screenToMap(b.screenStart));if(c.isNone(a))return null;const e=this._screenToMap(b.screenEnd);return c.isSome(e)?{...b,mapStart:a,mapEnd:e}:null}};h._vertexWithinPointerDistance=function(a,b){const e=this._mapToScreen(this.coordinateHelper.vectorToDehydratedPoint(a));
c.isSome(e)?(a=e.x-b.x,b=e.y-b.y,b=25>=a*a+b*b):b=!1;return b};h._getSnappingContext=function(a){const b=this._drawAtFixedElevation?c.applySome(this.elevationDrawSurface,({defaultZ:e})=>e):null;return new D.SnappingContext({editGeometryOperations:this._editGeometryOperations,elevationInfo:this.elevationInfo,pointer:a,visualizer:this.snappingVisualizer,selfSnappingZ:c.isSome(b)?{value:b,elevationInfo:this.elevationInfo}:null})};w._createClass(t,[{key:"_snappingEnabled",get:function(){return c.isSome(this.snappingManager)&&
this.snappingManager.options.effectiveEnabled}},{key:"_requiresScenePoint",get:function(){const a=this._getEffectiveDrawSurface();return"3d"===this.view.type&&this.drawSurface!==a}},{key:"canRedo",get:function(){return this._editGeometryOperations.canRedo}},{key:"canUndo",get:function(){return this._editGeometryOperations.canUndo}},{key:"committedVertices",get:function(){return this._activeComponent.vertices.map(a=>this.coordinateHelper.vectorToArray(a.pos))}},{key:"drawingMode",set:function(a){this._set("drawingMode",
a??z.defaultDrawingMode)}},{key:"interactive",get:function(){return this._manipulator.interactive},set:function(a){this._manipulator.interactive=a}},{key:"isCompleted",get:function(){return this._createOperationCompleted}},{key:"numCommittedVertices",get:function(){return this._activeComponent.vertices.length}},{key:"numVertices",get:function(){return c.isSome(this.stagedVertex)?this._activeComponent.vertices.length+1:this._activeComponent.vertices.length}},{key:"snappingOptions",get:function(){return c.isSome(this.snappingManager)?
this.snappingManager.options:null}},{key:"stagedVertex",get:function(){return this._snappingOperation.stagedPoint},set:function(a){this._snappingOperation.stagedPoint=H.clone(a)}},{key:"updating",get:function(){return this.updatingHandles.updating}},{key:"vertices",get:function(){const a=this.committedVertices;c.isSome(this.stagedVertex)&&a.push(this.coordinateHelper.pointToArray(this.stagedVertex));return a}},{key:"_drawAtFixedElevation",get:function(){return("segment"===this.geometryType||"polygon"===
this.geometryType)&&0<this.numCommittedVertices}}]);return t}(F.EventedMixin(G.HandleOwner));k.__decorate([l.property()],g.DrawOperation.prototype,"_snappingEnabled",null);k.__decorate([l.property()],g.DrawOperation.prototype,"defaultZ",void 0);k.__decorate([l.property()],g.DrawOperation.prototype,"isDraped",void 0);k.__decorate([l.property({value:z.defaultDrawingMode})],g.DrawOperation.prototype,"drawingMode",null);k.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"elevationDrawSurface",
void 0);k.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"elevationInfo",void 0);k.__decorate([l.property({constructOnly:!0,type:B})],g.DrawOperation.prototype,"labelOptions",void 0);k.__decorate([l.property({constructOnly:!0,type:C})],g.DrawOperation.prototype,"tooltipOptions",void 0);k.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"geometryType",void 0);k.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"hasM",void 0);k.__decorate([l.property({constructOnly:!0})],
g.DrawOperation.prototype,"hasZ",void 0);k.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"manipulators",void 0);k.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"drawSurface",void 0);k.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"segmentLabels",void 0);k.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"snappingManager",void 0);k.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"snappingVisualizer",
void 0);k.__decorate([l.property()],g.DrawOperation.prototype,"snapToSceneEnabled",void 0);k.__decorate([l.property()],g.DrawOperation.prototype,"_snappingOperation",void 0);k.__decorate([l.property()],g.DrawOperation.prototype,"stagedVertex",null);k.__decorate([l.property()],g.DrawOperation.prototype,"lastVertex",void 0);k.__decorate([l.property()],g.DrawOperation.prototype,"updating",null);k.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"view",void 0);g.DrawOperation=k.__decorate([J.subclass("esri.views.draw.DrawOperation")],
g.DrawOperation);Object.defineProperty(g,Symbol.toStringTag,{value:"Module"})});