// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.26/esri/copyright.txt for details.
//>>built
define("exports ../../../../chunks/_rollupPluginBabelHelpers ../../../../core/devEnvironmentUtils ../../../../core/maybe ../../../../chunks/mat3 ../../../../chunks/mat3f64 ../../../../chunks/mat4 ../../../../chunks/mat4f64 ../../../../chunks/vec3 ../../../../chunks/vec3f64 ../../../../geometry/support/aaBoundingBox ../../../../geometry/support/buffer/BufferView ../../../../chunks/vec32 ../../../../chunks/vec42 ../../../../geometry/support/buffer/utils ../../glTF/DefaultLoadingContext ../../glTF/loader ../../glTF/internal/indexUtils ../../glTF/internal/resourceUtils ../../glTF/internal/TextureTransformUtils ./ProcessedObjectResource ./wosrLoader ../../webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl ../../webgl-engine/lib/Attribute ../../webgl-engine/lib/basicInterfaces ../../webgl-engine/lib/Geometry ../../webgl-engine/lib/Texture ../../webgl-engine/lib/VertexAttribute ../../webgl-engine/materials/DefaultMaterial ../../webgl-engine/materials/DefaultMaterial_COLOR_GAMMA ../../../webgl/enums ../../../../chunks/vec22 ../../../../chunks/vec43 ../../../../chunks/vec33".split(" "),
function(K,ca,da,d,W,ea,fa,ha,C,N,O,t,L,P,G,ia,ja,Q,R,I,ka,X,Y,J,F,la,ma,z,S,H,T,na,Z,oa){function U(){U=ca._asyncToGenerator(function*(g,c){g=aa(da.adjustStaticAGOUrl(g));if("wosr"===g.fileType){g=yield c.cache?c.cache.loadWOSR(g.url,c):X.load(g.url,c);const {engineResources:u,referenceBoundingBox:n}=X.processLoadResult(g,c);return{lods:u,referenceBoundingBox:n,isEsriSymbolResource:!1,isWosr:!0}}const p=yield c.cache?c.cache.loadGLTF(g.url,c,!!c.usePBR):ja.loadGLTF(new ia.DefaultLoadingContext(c.streamDataRequester),
g.url,c,c.usePBR),v=d.get(p.model.meta,"ESRI_proxyEllipsoid"),D=p.meta.isEsriSymbolResource&&d.isSome(v)&&p.meta.uri.includes("/RealisticTrees/");if(D&&!p.customMeta.esriTreeRendering){p.customMeta.esriTreeRendering=!0;a:for(let u=0;u<p.model.lods.length;++u){var y=p.model.lods[u];for(var k of y.parts){y=k.attributes.normal;if(d.isNone(y))break a;const n=k.attributes.position,q=n.count,r=N.create(),b=N.create(),h=N.create(),E=G.createBuffer(t.BufferViewVec4u8,q),w=G.createBuffer(t.BufferViewVec3f,
q),l=fa.invert(ha.create(),k.transform);for(let e=0;e<q;e++){n.getVec(e,b);y.getVec(e,r);C.transformMat4(b,b,k.transform);C.subtract(h,b,v.center);C.divide(h,h,v.radius);const A=h[2];var x=C.length(h);x=Math.min(.45+.55*x*x,1);C.divide(h,h,v.radius);null!==l&&C.transformMat4(h,h,l);C.normalize(h,h);u+1!==p.model.lods.length&&1<p.model.lods.length&&(-1<A?C.lerp(h,h,r,.2):C.lerp(h,h,r,Math.min(-4*A-3.8,1)));w.setVec(e,h);E.set(e,0,255*x);E.set(e,1,255*x);E.set(e,2,255*x);E.set(e,3,255)}k.attributes.normal=
w;k.attributes.color=E}}}k=!!c.usePBR;const {engineResources:a,referenceBoundingBox:m}=ba(p,p.meta.isEsriSymbolResource?{usePBR:k,isSchematic:!1,treeRendering:D,mrrFactors:[0,1,.2]}:{usePBR:k,isSchematic:!1,treeRendering:!1,mrrFactors:[0,1,.5]},{...c.materialParamsMixin,treeRendering:D},c.skipHighLods&&null==g.specifiedLodIndex?{skipHighLods:!0}:{skipHighLods:!1,singleLodIndex:g.specifiedLodIndex});return{lods:a,referenceBoundingBox:m,isEsriSymbolResource:p.meta.isEsriSymbolResource,isWosr:!1}});
return U.apply(this,arguments)}function aa(g){const c=g.match(/(.*\.(gltf|glb))(\?lod=([0-9]+))?$/);return c?{fileType:"gltf",url:c[1],specifiedLodIndex:null!=c[4]?Number(c[4]):null}:g.match(/(.*\.(json|json\.gz))$/)?{fileType:"wosr",url:g,specifiedLodIndex:null}:{fileType:"unknown",url:g,specifiedLodIndex:null}}function ba(g,c,p,v){const D=g.model,y=[],k=new Map,x=new Map,a=D.lods.length,m=O.empty();D.lods.forEach((u,n)=>{const q=!0===v.skipHighLods&&(1<a&&0===n||3<a&&1===n)||!1===v.skipHighLods&&
null!=v.singleLodIndex&&n!==v.singleLodIndex;if(!q||0===n){var r=new ka.ProcessedObjectResource(u.name,u.lodThreshold,[0,0,0]);u.parts.forEach(b=>{const h=q?new S.DefaultMaterial({}):pa(D,b,r,c,p,k,x);var E=d.isSome(h)?h:new S.DefaultMaterial({});const w=b.attributes.position.count;a:{var l=b.indices||w;switch(b.primitiveType){case T.PrimitiveType.TRIANGLES:l=Q.trianglesToTriangles(l);break a;case T.PrimitiveType.TRIANGLE_STRIP:l=Q.triangleStripToTriangles(l);break a;case T.PrimitiveType.TRIANGLE_FAN:l=
Q.triangleFanToTriangles(l);break a}l=void 0}var e=G.createBuffer(t.BufferViewVec3f,w);L.transformMat4(e,b.attributes.position,b.transform);e=[[z.VertexAttribute.POSITION,new J.Attribute(e.typedBuffer,e.elementCount,!0)]];const A=[[z.VertexAttribute.POSITION,l]];if(d.isSome(b.attributes.normal)){var f=G.createBuffer(t.BufferViewVec3f,w);W.normalFromMat4(M,b.transform);L.transformMat3(f,b.attributes.normal,M);e.push([z.VertexAttribute.NORMAL,new J.Attribute(f.typedBuffer,f.elementCount,!0)]);A.push([z.VertexAttribute.NORMAL,
l])}d.isSome(b.attributes.tangent)&&(f=G.createBuffer(t.BufferViewVec4f,w),W.normalFromMat4(M,b.transform),P.transformMat3(f,b.attributes.tangent,M),e.push([z.VertexAttribute.TANGENT,new J.Attribute(f.typedBuffer,f.elementCount,!0)]),A.push([z.VertexAttribute.TANGENT,l]));d.isSome(b.attributes.texCoord0)&&(f=G.createBuffer(t.BufferViewVec2f,w),na.normalizeIntegerBuffer(f,b.attributes.texCoord0),e.push([z.VertexAttribute.UV0,new J.Attribute(f.typedBuffer,f.elementCount,!0)]),A.push([z.VertexAttribute.UV0,
l]));if(d.isSome(b.attributes.color)){f=G.createBuffer(t.BufferViewVec4u8,w);if(4===b.attributes.color.elementCount)b.attributes.color instanceof t.BufferViewVec4f?P.scale(f,b.attributes.color,255):b.attributes.color instanceof t.BufferViewVec4u8?Z.copy(f,b.attributes.color):b.attributes.color instanceof t.BufferViewVec4u16&&P.scale(f,b.attributes.color,1/256);else{Z.fill(f,255,255,255,255);const V=new t.BufferViewVec3u8(f.buffer,0,4);b.attributes.color instanceof t.BufferViewVec3f?L.scale(V,b.attributes.color,
255):b.attributes.color instanceof t.BufferViewVec3u8?oa.copy(V,b.attributes.color):b.attributes.color instanceof t.BufferViewVec3u16&&L.scale(V,b.attributes.color,1/256)}e.push([z.VertexAttribute.COLOR,new J.Attribute(f.typedBuffer,f.elementCount,!0)]);A.push([z.VertexAttribute.COLOR,l])}b={geometry:new la.Geometry(E,e,A),vertexCount:w};const {geometry:B,vertexCount:qa}=b;b=B.boundingInfo;d.isSome(b)&&0===n&&(O.expandWithVec3(m,b.bbMin),O.expandWithVec3(m,b.bbMax));d.isSome(h)&&(r.stageResources.geometries.push(B),
r.numberOfVertices+=qa)});q||y.push(r)}});return{engineResources:y,referenceBoundingBox:m}}function pa(g,c,p,v,D,y,k){const x=c.material+(c.attributes.normal?"_normal":"")+(c.attributes.color?"_color":"")+(c.attributes.texCoord0?"_texCoord0":"")+(c.attributes.tangent?"_tangent":""),a=g.materials.get(c.material);var m=d.isSome(c.attributes.texCoord0);const u=d.isSome(c.attributes.normal);if(d.isNone(a))return null;a:{switch(a.alphaMode){case "BLEND":var n=F.AlphaDiscardMode.Blend;break a;case "MASK":n=
F.AlphaDiscardMode.Mask;break a;case "OPAQUE":case null:case void 0:n=F.AlphaDiscardMode.Opaque;break a}n=void 0}if(!y.has(x)){if(m){var q=(e,A=!1)=>{if(d.isSome(e)&&!k.has(e)){const f=g.textures.get(e);if(d.isSome(f)){const B=f.data;k.set(e,new ma.Texture(R.isEncodedMeshTexture(B)?B.data:B,{...f.parameters,preMultiplyAlpha:R.isEncodedMeshTexture(B)?!1:A,encoding:R.isEncodedMeshTexture(B)&&d.isSome(B.encoding)?B.encoding:void 0}))}}};q(a.textureColor,n!==F.AlphaDiscardMode.Opaque);q(a.textureNormal);
q(a.textureOcclusion);q(a.textureEmissive);q(a.textureMetallicRoughness)}q=a.color[0]**(1/H.COLOR_GAMMA);const r=a.color[1]**(1/H.COLOR_GAMMA),b=a.color[2]**(1/H.COLOR_GAMMA),h=a.emissiveFactor[0]**(1/H.COLOR_GAMMA),E=a.emissiveFactor[1]**(1/H.COLOR_GAMMA),w=a.emissiveFactor[2]**(1/H.COLOR_GAMMA),l=d.isSome(a.textureColor)&&m?k.get(a.textureColor):null;y.set(x,new S.DefaultMaterial({...v,transparent:n===F.AlphaDiscardMode.Blend,customDepthTest:F.DepthTestFunction.Lequal,textureAlphaMode:n,textureAlphaCutoff:a.alphaCutoff,
diffuse:[q,r,b],ambient:[q,r,b],opacity:a.opacity,doubleSided:a.doubleSided,doubleSidedType:"winding-order",cullFace:a.doubleSided?F.CullFaceOptions.None:F.CullFaceOptions.Back,hasVertexColors:!!c.attributes.color,hasVertexTangents:!!c.attributes.tangent,normalType:u?Y.NormalAttributeType.Attribute:Y.NormalAttributeType.ScreenDerivative,castShadows:!0,receiveSSAO:!0,textureId:d.isSome(l)?l.id:void 0,colorMixMode:a.colorMixMode,normalTextureId:d.isSome(a.textureNormal)&&m?k.get(a.textureNormal).id:
void 0,textureAlphaPremultiplied:d.isSome(l)&&!!l.params.preMultiplyAlpha,occlusionTextureId:d.isSome(a.textureOcclusion)&&m?k.get(a.textureOcclusion).id:void 0,emissiveTextureId:d.isSome(a.textureEmissive)&&m?k.get(a.textureEmissive).id:void 0,metallicRoughnessTextureId:d.isSome(a.textureMetallicRoughness)&&m?k.get(a.textureMetallicRoughness).id:void 0,emissiveFactor:[h,E,w],mrrFactors:[a.metallicFactor,a.roughnessFactor,v.mrrFactors[2]],isSchematic:!1,colorTextureTransformMatrix:I.getTransformMatrix(a.colorTextureTransform),
normalTextureTransformMatrix:I.getTransformMatrix(a.normalTextureTransform),occlusionTextureTransformMatrix:I.getTransformMatrix(a.occlusionTextureTransform),emissiveTextureTransformMatrix:I.getTransformMatrix(a.emissiveTextureTransform),metallicRoughnessTextureTransformMatrix:I.getTransformMatrix(a.metallicRoughnessTextureTransform),...D}))}c=y.get(x);p.stageResources.materials.push(c);m&&(m=r=>{d.isSome(r)&&p.stageResources.textures.push(k.get(r))},m(a.textureColor),m(a.textureNormal),m(a.textureOcclusion),
m(a.textureEmissive),m(a.textureMetallicRoughness));return c}const M=ea.create();K.fetch=function(g,c){return U.apply(this,arguments)};K.gltfToEngineResources=ba;K.parseUrl=aa;Object.defineProperty(K,Symbol.toStringTag,{value:"Module"})});